<?php

namespace SolubleTest\FlexStore\Source\Zend;

use Soluble\FlexStore\Options;
use Soluble\FlexStore\Source;
use Soluble\FlexStore\FlexStore;
use Zend\Db\Sql\Select;
use Zend\Db\Sql\Expression;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-10-14 at 12:05:43.
 */
class UseCasesTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var SelectSource
     */
    protected $source;


    /**
     *
     * @var \Zend\Db\Adapter\Adapter
     */
    protected $adapter;

    /**
     *
     * @var array
     */
    protected $sources;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $zendAdapter = \SolubleTestFactories::getDbAdapter();

        $this->sources = [
            'zend-sqlsource' => [
                'source' => new Source\Zend\SqlSource($zendAdapter)
            ]
        ];
    }

    public function testBasicDataRetrieval()
    {
        foreach ($this->sources as $key => $options) {
            $source = $options['source'];

            $queryOne = $this->getQueryOne($key);

            $source->setSelect($queryOne);
            $store = new FlexStore($source);

            $data = $store->getData();

            $this->assertInstanceOf('\Traversable', $data);
            $this->assertInstanceOf('\Countable', $data);
            $this->assertInstanceOf('\Soluble\FlexStore\Resultset\ResultsetInterface', $data);

            $this->assertInternalType('integer', $data->count());
            $this->assertEquals(count($data), $data->count());

            $current = $data->current();
            $this->assertInstanceOf('\ArrayObject', $current);

            $i = 0;
            foreach ($data as $idx => $row) {
                $this->assertEquals($i, $idx);
                $this->assertInstanceOf('\ArrayObject', $row);
                $i++;
            }

            $toArray = $data->toArray();
            $this->assertInternalType('array', $toArray);
            foreach ($toArray as $idx => $row) {
                $this->assertInternalType('array', $row);
            }
            $this->assertEquals((array) $current, $toArray[0]);
        }
    }

    public function testBasicDataRetrievalWithOptions()
    {
        foreach ($this->sources as $key => $options) {
            $source = $options['source'];
            $queryOne = $this->getQueryOne($key);
            $source->setSelect($queryOne);
            $store = new FlexStore($source);
            $options = new Options();
            $options->setLimit(1);
            $data = $store->getData($options);
            $this->assertEquals(1, count($data));
        }
    }


    public function testColumnModel()
    {
        foreach ($this->sources as $key => $options) {
            $source = $options['source'];
            $queryOne = $this->getQueryOne($key);
            $source->setSelect($queryOne);
            $store = new FlexStore($source);

            $cm = $store->getColumnModel();
            $this->assertInstanceOf('\Soluble\FlexStore\Column\ColumnModel', $cm);
            $columns = $cm->getColumns();
            $this->assertInstanceOf('ArrayObject', $columns);
            $column = $cm->get('reference');
            $this->assertEquals($column, $columns['reference']);

            $p = $column->getProperties();

            $column->getName();
            $column->getHeader();
            $column->getType();

            $column->getFormatter();

            $column->getWidth();
            $column->isEditable();
            $column->isExcluded();
            $column->isFilterable();
            $column->isGroupable();
            $column->isSortable();
        }
    }

    protected function getQueryOne($key)
    {
        $select = new Select();
        $select->from(['p' => 'product'], [])
                ->join(['ppl' => 'product_pricelist'], 'ppl.product_id = p.product_id', [], Select::JOIN_LEFT)
                ->limit(100);

        $select->columns([
           'product_id' => new Expression('p.product_id'),
           'brand_id'   => new Expression('p.brand_id'),
           'reference'  => new Expression('p.reference'),
           'description'    => new Expression('p.description'),
           'volume'         => new Expression('p.volume'),
           'weight'         => new Expression('p.weight'),
           'barcode_ean13'  => new Expression('1234567890123'),
           'created_at'     => new Expression('NOW()'),
           'price'          => new Expression('ppl.price'),
           'discount_1'     => new Expression('ppl.discount_1'),
           'pricelist.promo_start_at' => new Expression('ppl.promo_start_at'),
           'promo_end_at'   => new Expression('cast(NOW() as date)')
        ], false);

        switch ($key) {
            case 'zend-sqlsource':
                break;
            default:
        }

        return $select;
    }
}
