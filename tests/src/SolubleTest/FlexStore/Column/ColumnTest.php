<?php

/*
 * soluble-flexstore library
 *
 * @author    Vanvelthem Sébastien
 * @link      https://github.com/belgattitude/soluble-flexstore
 * @copyright Copyright (c) 2016-2017 Vanvelthem Sébastien
 * @license   MIT License https://github.com/belgattitude/soluble-flexstore/blob/master/LICENSE.md
 *
 */

namespace SolubleTest\FlexStore\Column;

use PHPUnit\Framework\TestCase;
use Soluble\FlexStore\Column\Column;
use Soluble\FlexStore\Column\ColumnType;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-09-30 at 16:51:25.
 */
class ColumnTest extends TestCase
{
    public function testGetProperties()
    {
        $formatter = new \Soluble\FlexStore\Formatter\CurrencyFormatter();
        $properties = [
            'type' => 'string', // will be defaulted to string
            'formatter' => $formatter,
            'excluded' => true,
            'hidden' => true,
            'width' => '100%',
            'header' => 'cool', // will be defaulted to name
            'filterable' => false,
            'groupable' => false,
            'sortable' => false,
            'editable' => true,
            'virtual' => true,
            'align' => 'right',
            'class' => 'css_class'
        ];

        $column = new Column('cool', $properties);
        self::assertEquals($properties, $column->getProperties());
    }

    public function testWithProperties()
    {
        $properties = [
            'type' => ColumnType::TYPE_DATE,
            'header' => 'header',
            'width' => '100%',
            'filterable' => false,
            'groupable' => false,
            'sortable' => false,
            'hidden' => true,
            'excluded' => true,
            'editable' => true
        ];

        $column = new Column('cool', $properties);
        self::assertFalse($column->isSortable());
        self::assertFalse($column->isGroupable());
        self::assertFalse($column->isFilterable());
        self::assertTrue($column->isHidden());
        self::assertTrue($column->isExcluded());
        self::assertTrue($column->isEditable());
        self::assertNull($column->getClass());
        self::assertNull($column->getAlign());
        self::assertEquals('header', $column->getHeader());
        self::assertEquals(ColumnType::TYPE_DATE, $column->getType());
        self::assertEquals('100%', $column->getWidth());

        $properties = [
            'header' => 'changed',
        ];
        $column->setProperties($properties);
        self::assertEquals('changed', $column->getHeader());
    }

    public function testSetPropertiesThrowsInvalidArgumentException()
    {
        $this->expectException('Soluble\FlexStore\Column\Exception\InvalidArgumentException');

        $properties = [
            'header' => 'header',
            'not_exists' => '100%',
        ];

        $column = new Column('cool', $properties);
    }

    public function setTypeThrowsInvalidArgumentException()
    {
        $this->expectException('Soluble\FlexStore\Column\Exception\InvalidArgumentException');
        $type = new \stdClass();
        $column = new Column('cool');
        $column->setType($type);
    }

    public function testSetPropertiesThrowsInvalidArgumentException2()
    {
        $this->expectException('Soluble\FlexStore\Column\Exception\InvalidArgumentException');

        $properties = [
            'header' => 'header',
            'not_exists' => '100%',
        ];

        $column = new Column('cool');
        $column->setProperties($properties);
    }

    public function testGetSet()
    {
        $column = new Column('cool');
        self::assertEquals('cool', $column->getName());

        self::assertEquals('cool', $column->getHeader());
        $column->setHeader('Hello');
        self::assertEquals('Hello', $column->getHeader());

        // Width
        self::assertNull($column->getWidth());
        $column->setWidth(10);
        self::assertEquals(10, $column->getWidth());

        // Groupable
        self::assertTrue($column->isGroupable());
        $column->setGroupable($groupable = true);
        self::assertTrue($column->isGroupable());
        $column->setGroupable($groupable = false);
        self::assertFalse($column->isGroupable());

        // Hidden
        self::assertFalse($column->isHidden());
        $column->setHidden();
        self::assertTrue($column->isHidden());
        $column->setHidden(false);
        self::assertFalse($column->isHidden());

        // Filterable
        self::assertTrue($column->isFilterable());
        $column->setFilterable();
        self::assertTrue($column->isFilterable());
        $column->setFilterable(false);
        self::assertFalse($column->isFilterable());

        // Excluded
        self::assertFalse($column->isExcluded());
        $column->setExcluded();
        self::assertTrue($column->isExcluded());
        $column->setExcluded(false);
        self::assertFalse($column->isExcluded());

        // Sortable
        self::assertTrue($column->isSortable());
        $column->setSortable();
        self::assertTrue($column->isSortable());
        $column->setSortable(false);
        self::assertFalse($column->isSortable());

        // Editable
        self::assertFalse($column->isEditable());
        $column->setEditable();
        self::assertTrue($column->isEditable());
        $column->setEditable(false);
        self::assertFalse($column->isEditable());
    }

    public function testConstructThrowsInvalidArgumentException()
    {
        $this->expectException('Soluble\FlexStore\Column\Exception\InvalidArgumentException');
        $column = new Column(['cool']);
    }

    public function testConstructThrowsInvalidArgumentException2()
    {
        $this->expectException('Soluble\FlexStore\Column\Exception\InvalidArgumentException');
        $column = new Column(' ');
    }

    public function testSetWidthThrowsInvalidArgumentException()
    {
        $this->expectException('Soluble\FlexStore\Column\Exception\InvalidArgumentException');
        $column = new Column('hello');
        $column->setWidth(['cool']);
    }

    /**
     * @covers \Soluble\FlexStore\Column\Column::__toString
     */
    public function test__toString()
    {
        $column = new Column('hello');
        self::assertEquals('hello', (string) $column);
    }
}
