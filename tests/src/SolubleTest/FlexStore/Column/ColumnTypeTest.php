<?php

/*
 * soluble-flexstore library
 *
 * @author    Vanvelthem Sébastien
 * @link      https://github.com/belgattitude/soluble-flexstore
 * @copyright Copyright (c) 20016-2017 Vanvelthem Sébastien
 * @license   MIT License https://github.com/belgattitude/soluble-flexstore/blob/master/LICENSE.md
 *
 */

namespace SolubleTest\FlexStore\Column;

use Soluble\FlexStore\Column\ColumnType;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-10-03 at 11:32:13.
 */
class ColumnTypeTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ColumnType
     */
    protected $type;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->type = new ColumnType();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testCreate()
    {
        $this->assertEquals(ColumnType::TYPE_STRING, ColumnType::createType(ColumnType::TYPE_STRING)->getName());
        $this->assertEquals(ColumnType::TYPE_INTEGER, ColumnType::createType(ColumnType::TYPE_INTEGER)->getName());
        $this->assertEquals(ColumnType::TYPE_BIT, ColumnType::createType(ColumnType::TYPE_BIT)->getName());
        $this->assertEquals(ColumnType::TYPE_BLOB, ColumnType::createType(ColumnType::TYPE_BLOB)->getName());
        $this->assertEquals(ColumnType::TYPE_BOOLEAN, ColumnType::createType(ColumnType::TYPE_BOOLEAN)->getName());
        $this->assertEquals(ColumnType::TYPE_DATE, ColumnType::createType(ColumnType::TYPE_DATE)->getName());
        $this->assertEquals(ColumnType::TYPE_DATETIME, ColumnType::createType(ColumnType::TYPE_DATETIME)->getName());
        $this->assertEquals(ColumnType::TYPE_DECIMAL, ColumnType::createType(ColumnType::TYPE_DECIMAL)->getName());
        $this->assertEquals(ColumnType::TYPE_TIME, ColumnType::createType(ColumnType::TYPE_TIME)->getName());
    }

    public function testCreateThrowsInvalidArgumentException()
    {
        $this->setExpectedException('Soluble\FlexStore\Column\Exception\InvalidArgumentException');
        ColumnType::createType('not_a_valid_type_name');
    }

    public function testAll()
    {
        $supported = ColumnType::getSupported();
        foreach ($supported as $type_name) {
            $type = ColumnType::createType($type_name);
            $this->assertInstanceOf('Soluble\FlexStore\Column\Type\AbstractType', $type);
            $this->assertEquals($type_name, $type->getName());
        }
    }

    public function testIsSupported()
    {
        $this->assertTrue(ColumnType::isSupported(ColumnType::TYPE_BIT));
        $this->assertFalse(ColumnType::isSupported('cool'));
    }
}
