<?php

/*
 * soluble-flexstore library
 *
 * @author    Vanvelthem Sébastien
 * @link      https://github.com/belgattitude/soluble-flexstore
 * @copyright Copyright (c) 2016-2017 Vanvelthem Sébastien
 * @license   MIT License https://github.com/belgattitude/soluble-flexstore/blob/master/LICENSE.md
 *
 */

namespace SolubleTest\FlexStore\Column\Search;

use PHPUnit\Framework\TestCase;
use Soluble\FlexStore\Column\ColumnModel;
use Soluble\FlexStore\Source\Zend\SqlSource;
use Soluble\FlexStore\FlexStore;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-04-10 at 15:15:20.
 */
class ResultTest extends TestCase
{
    /**
     * @var SqlSource
     */
    protected $source;

    /**
     * @var \Zend\Db\Adapter\Adapter
     */
    protected $adapter;

    /**
     * @var ColumnModel
     */
    protected $columnModel;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->adapter = \SolubleTestFactories::getDbAdapter();
        $select = new \Zend\Db\Sql\Select();
        $select->from('user');
        $this->source = new SqlSource($this->adapter, $select);
        $this->columnModel = $this->source->getColumnModel();
    }

    public function testSearchResults()
    {
        $source = new SqlSource($this->adapter);
        $select = $source->select();
        $select->from(['p' => 'product']);

        $store = new FlexStore($source);
        $cm = $store->getColumnModel();

        $results = $cm->search()->regexp('/created_at/');

        $this->assertInstanceOf('Soluble\FlexStore\Column\ColumnModel\Search\Result', $results);

        $results->setEditable(true);
        $this->assertTrue($cm->get('created_at')->isEditable());
        $results->setEditable(false);
        $this->assertFalse($cm->get('created_at')->isEditable());

        $results->setExcluded(true);
        $this->assertTrue($cm->get('created_at')->isExcluded());
        $results->setExcluded(false);
        $this->assertFalse($cm->get('created_at')->isExcluded());

        $results->setSortable(true);
        $this->assertTrue($cm->get('created_at')->isSortable());
        $results->setSortable(false);
        $this->assertFalse($cm->get('created_at')->isSortable());

        $results->setHidden(true);
        $this->assertTrue($cm->get('created_at')->isHidden());
        $results->setHidden(false);
        $this->assertFalse($cm->get('created_at')->isHidden());

        $results->setVirtual(true);
        $this->assertTrue($cm->get('created_at')->isVirtual());
        $results->setVirtual(false);
        $this->assertFalse($cm->get('created_at')->isVirtual());

        $results->setGroupable(true);
        $this->assertTrue($cm->get('created_at')->isGroupable());
        $results->setGroupable(false);
        $this->assertFalse($cm->get('created_at')->isGroupable());

        $results->setFilterable(true);
        $this->assertTrue($cm->get('created_at')->isFilterable());
        $results->setFilterable(false);
        $this->assertFalse($cm->get('created_at')->isFilterable());

        $results->setWidth(10);
        $this->assertEquals(10, $cm->get('created_at')->getWidth());

        $results->setHeader('header');
        $this->assertEquals('header', $cm->get('created_at')->getHeader());

        $results->setType('date');
        $this->assertEquals('date', $cm->get('created_at')->getType());
    }
}
