<?php

/*
 * soluble-flexstore library
 *
 * @author    Vanvelthem Sébastien
 * @link      https://github.com/belgattitude/soluble-flexstore
 * @copyright Copyright (c) 2016-2017 Vanvelthem Sébastien
 * @license   MIT License https://github.com/belgattitude/soluble-flexstore/blob/master/LICENSE.md
 *
 */

namespace SolubleTest\FlexStore\Formatter;

use PHPUnit\Framework\TestCase;
use Soluble\FlexStore\Formatter\CurrencyFormatter;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-10-05 at 13:20:15.
 */
class CurrencyFormatTest extends TestCase
{
    /**
     * @var CurrencyFormatter
     */
    protected $currencyFormatter;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        parent::__construct();
        $this->currencyFormatter = new CurrencyFormatter();
    }

    public function testConstruct()
    {
        $params = [
            'locale' => 'zh_CN',
            'pattern' => '#,##0.###',
            'decimals' => 3
        ];
        $f = new CurrencyFormatter($params);
        self::assertEquals('zh_CN', $f->getLocale());
        self::assertEquals('#,##0.###', $f->getPattern());
        self::assertEquals(3, $f->getDecimals());
    }

    public function testGetSet()
    {
        $f = $this->currencyFormatter;
        self::assertInternalType('string', $f->getLocale());
        self::assertEquals($f->getLocale(), substr(\Locale::getDefault(), 0, 5));
        self::assertNull($f->getPattern());
        self::assertEquals(2, $f->getDecimals());

        $f->setDecimals(3);
        $f->setPattern('#,##0.###');
        $f->setLocale('zh_CN');

        self::assertEquals('zh_CN', $f->getLocale());
        self::assertEquals('#,##0.###', $f->getPattern());
        self::assertEquals(3, $f->getDecimals());
    }

    public function testConstructThrowsInvalidArgumentException()
    {
        $this->expectException('Soluble\FlexStore\Exception\InvalidArgumentException');
        $params = [
            'cool' => 0
        ];
        new CurrencyFormatter($params);
    }

    public function testFormat()
    {
        $moneyFormatter = new CurrencyFormatter();
        $moneyFormatter->setCurrencyCode('EUR');
        $moneyFormatter->setLocale('fr_FR');
        self::assertEquals('10,24 €', $moneyFormatter->format(10.239));
        $moneyFormatter->setLocale('en_US');
        self::assertEquals('€10.24', $moneyFormatter->format(10.239));
        $moneyFormatter->setLocale('en_GB');
        self::assertEquals('€10.24', $moneyFormatter->format(10.239));
        $moneyFormatter->setCurrencyCode('CAD');
        self::assertEquals('CA$10.24', $moneyFormatter->format(10.239));
        $moneyFormatter->setCurrencyCode('CNY');
        self::assertEquals('CN¥10.24', $moneyFormatter->format(10.239));
        $moneyFormatter->setCurrencyCode('GBP');
        self::assertEquals('£10.24', $moneyFormatter->format(10.239));
        self::assertEquals('-£10.24', $moneyFormatter->format(-10.239));
        $moneyFormatter->setLocale('fr_FR');
        $moneyFormatter->setCurrencyCode('EUR');
        self::assertEquals('-10,24 €', $moneyFormatter->format(-10.239));
        $moneyFormatter->setLocale('en_GB');
        $moneyFormatter->setCurrencyCode('GBP');
        self::assertEquals('-£10.24', $moneyFormatter->format(-10.239));

        $parsed = $moneyFormatter->parse('-£10.24');
        self::assertInternalType('array', $parsed);
        self::assertEquals('GBP', $parsed['currency']);
        self::assertEquals(-10.24, $parsed['value']);

        $params = [
            'locale' => 'fr_FR',
            'decimals' => 3,
            'disableUseOfNonBreakingSpaces' => true
        ];
        $f = new CurrencyFormatter($params);
        $f->setCurrencyCode('EUR');

        $formatted = preg_replace('~\xc2\xa0~', ' ', $f->format(1123.4567));

        self::assertEquals('1 123,457 €', $formatted);

        $formatted = preg_replace('~\xc2\xa0~', ' ', $f->format(null));
        self::assertEquals('0,000 €', $formatted);
    }

    public function testFormatThrowsRuntimeException()
    {
        $this->expectException('Soluble\FlexStore\Exception\RuntimeException');
        $f = new CurrencyFormatter();
        $f->format(1123.4567);
    }

    public function testFormatThrowsRuntimeException2()
    {
        $this->expectException('Soluble\FlexStore\Exception\RuntimeException');
        $params = [
            'locale' => 'fr_FR',
            'decimals' => 3
        ];
        $f = new CurrencyFormatter($params);
        $f->format(['cool']);
    }

    public function testFormatThrowsRuntimeException3()
    {
        $this->expectException('Soluble\FlexStore\Exception\RuntimeException');
        $params = [
            'locale' => 'fr_FR',
            'decimals' => 3
        ];
        $f = new CurrencyFormatter($params);
        $f->format('not a number');
    }
}
