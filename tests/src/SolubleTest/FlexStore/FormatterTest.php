<?php

/*
 * soluble-flexstore library
 *
 * @author    Vanvelthem SÃ©bastien
 * @link      https://github.com/belgattitude/soluble-flexstore
 * @copyright Copyright (c) 20016-2017 Vanvelthem SÃ©bastien
 * @license   MIT License https://github.com/belgattitude/soluble-flexstore/blob/master/LICENSE.md
 *
 */

namespace SolubleTest\FlexStore;

use Soluble\FlexStore\Formatter;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-10-09 at 12:38:36.
 */
class FormatterTest extends \PHPUnit_Framework_TestCase
{
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testCreate()
    {
        $c = Formatter::create(Formatter::FORMATTER_CURRENCY);
        $this->assertInstanceOf('Soluble\FlexStore\Formatter\FormatterInterface', $c);
        $this->assertInstanceOf('Soluble\FlexStore\Formatter\FormatterNumberInterface', $c);
        $this->assertInstanceOf('Soluble\FlexStore\Formatter\CurrencyFormatter', $c);
        $this->assertInstanceOf('Soluble\FlexStore\Formatter\NumberFormatter', $c);

        $u = Formatter::create(Formatter::FORMATTER_UNIT);
        $this->assertInstanceOf('Soluble\FlexStore\Formatter\FormatterInterface', $u);
        $this->assertInstanceOf('Soluble\FlexStore\Formatter\FormatterNumberInterface', $u);
        $this->assertInstanceOf('Soluble\FlexStore\Formatter\UnitFormatter', $u);
        $this->assertInstanceOf('Soluble\FlexStore\Formatter\NumberFormatter', $u);

        $n = Formatter::create(Formatter::FORMATTER_NUMBER);
        $this->assertInstanceOf('Soluble\FlexStore\Formatter\FormatterInterface', $n);
        $this->assertInstanceOf('Soluble\FlexStore\Formatter\FormatterNumberInterface', $n);
        $this->assertInstanceOf('Soluble\FlexStore\Formatter\NumberFormatter', $n);
    }

    public function testCreateThrowsInvalidArgumentException()
    {
        $this->setExpectedException('Soluble\FlexStore\Exception\InvalidArgumentException');
        $n = Formatter::create('cool');
    }

    public function testGetSupported()
    {
        $su = Formatter::getSupported();
        $this->assertInternalType('array', $su);
    }
}
