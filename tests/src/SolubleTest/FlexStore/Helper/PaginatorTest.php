<?php

/*
 * soluble-flexstore library
 *
 * @author    Vanvelthem Sébastien
 * @link      https://github.com/belgattitude/soluble-flexstore
 * @copyright Copyright (c) 2016-2017 Vanvelthem Sébastien
 * @license   MIT License https://github.com/belgattitude/soluble-flexstore/blob/master/LICENSE.md
 *
 */

namespace SolubleTest\FlexStore\Helper;

use Soluble\FlexStore\Helper\Paginator;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-10-17 at 12:54:41.
 */
class PaginatorTest extends \PHPUnit_Framework_TestCase
{
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testSomeException()
    {
        try {
            $p = new Paginator(10, 'cc');
            $this->assertFalse(true, 'should throw an InvalidUsagException');
        } catch (\Soluble\FlexStore\Exception\InvalidUsageException $ex) {
            $this->assertTrue(true);
        }

        try {
            $p = new Paginator('0', -5, 0);
            $this->assertFalse(true, 'should throw an InvalidUsagException');
        } catch (\Soluble\FlexStore\Exception\InvalidUsageException $ex) {
            $this->assertTrue(true);
        }

        try {
            $p = new Paginator('20', 10, -2);
            $this->assertFalse(true, 'should throw an InvalidUsagException');
        } catch (\Soluble\FlexStore\Exception\InvalidUsageException $ex) {
            $this->assertTrue(true);
        }

        try {
            $p = new Paginator('-15', 10, 0);
            $this->assertFalse(true, 'should throw an InvalidUsagException');
        } catch (\Soluble\FlexStore\Exception\InvalidUsageException $ex) {
            $this->assertTrue(true);
        }
    }

    public function testConstruct()
    {
        $p = new Paginator('150', '10', '20');
        $this->assertEquals(10, $p->getItemCountPerPage());
        $this->assertEquals(3, $p->getCurrentPageNumber());
        $this->assertEquals(150, $p->getTotalItemCount());
    }
}
