<?php

/*
 * soluble-flexstore library
 *
 * @author    Vanvelthem Sébastien
 * @link      https://github.com/belgattitude/soluble-flexstore
 * @copyright Copyright (c) 2016-2017 Vanvelthem Sébastien
 * @license   MIT License https://github.com/belgattitude/soluble-flexstore/blob/master/LICENSE.md
 *
 */

namespace SolubleTest\FlexStore\Writer\Http;

use PHPUnit\Framework\TestCase;
use Soluble\FlexStore\Writer\Http\SimpleHeaders;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-09-26 at 19:10:46.
 */
class SimpleHeadersTest extends TestCase
{
    /**
     * @var SimpleHeaders
     */
    protected $headers;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->headers = new SimpleHeaders();
    }

    public function testAll()
    {
        $headers = new SimpleHeaders();
        self::assertNull($headers->getCharset());
        self::assertNull($headers->getFilename());
        self::assertNull($headers->getContentDispositionType());
        self::assertNull($headers->getContentLength());
        self::assertNull($headers->getContentType());

        $headers->setContentType('application/pdf');
        $headers->setFilename('test.pdf');
        $headers->setContentLength(10);
        //$headers->setCharset('utf8');

        self::assertEquals('application/pdf', $headers->getContentType());
        self::assertEquals(10, $headers->getContentLength());
        self::assertEquals('test.pdf', $headers->getFilename());
        self::assertEquals('attachement', $headers->getContentDispositionType());

        $lines = $headers->getHeaderLines();
        self::assertEquals('Content-Type: application/pdf', $lines[0]);
        self::assertEquals('Content-Disposition: attachement; filename="test.pdf"', $lines[1]);
        self::assertEquals('Content-Length: 10', $lines[2]);

        // with charset
        $headers = new SimpleHeaders();
        $headers->setContentType('application/pdf');
        $headers->setFilename('test.pdf');
        $headers->setContentLength(10);
        $headers->setCharset('utf-8');

        $lines = $headers->getHeaderLines();
        self::assertEquals('Content-Type: application/pdf; charset=utf-8', $lines[0]);
        self::assertEquals('Content-Disposition: attachement; filename="test.pdf"', $lines[1]);
        self::assertEquals('Content-Length: 10', $lines[2]);

        // with charset
        $headers = new SimpleHeaders();
        $headers->setContentType('application/pdf', 'utf-8');
        $headers->setFilename('test.pdf');
        $headers->setContentLength(10);

        $lines = $headers->getHeaderLines();
        self::assertEquals('Content-Type: application/pdf; charset=utf-8', $lines[0]);
        self::assertEquals('Content-Disposition: attachement; filename="test.pdf"', $lines[1]);
        self::assertEquals('Content-Length: 10', $lines[2]);

        // with charset
        $headers = new SimpleHeaders();
        $headers->setContentType('application/pdf', 'utf-8');
        $headers->setFilename('test.pdf', SimpleHeaders::DIPOSITION_INLINE);
        $headers->setContentLength(10);

        $lines = $headers->getHeaderLines();
        self::assertEquals('Content-Type: application/pdf; charset=utf-8', $lines[0]);
        self::assertEquals('Content-Disposition: inline; filename="test.pdf"', $lines[1]);
        self::assertEquals('Content-Length: 10', $lines[2]);

        // with only attachement
        $headers = new SimpleHeaders();
        $headers->setContentType('application/pdf', 'utf-8');
        $headers->setContentDispositionType(SimpleHeaders::DIPOSITION_ATTACHEMENT);
        $headers->setContentLength(10);

        $lines = $headers->getHeaderLines();
        self::assertEquals('Content-Type: application/pdf; charset=utf-8', $lines[0]);
        self::assertEquals('Content-Disposition: attachement', $lines[1]);
        self::assertEquals('Content-Length: 10', $lines[2]);
    }

    public function testSetCharsetThrowsRuntimeException()
    {
        $this->expectException('Soluble\FlexStore\Writer\Http\Exception\RuntimeException');
        $headers = new SimpleHeaders();
        $headers->setCharset('utf-8');
    }

    public function testSetContentDispositionTypeThrowsInvalidArgumentException()
    {
        $this->expectException('Soluble\FlexStore\Writer\Http\Exception\InvalidArgumentException');
        $headers = new SimpleHeaders();
        $headers->setContentDispositionType('cool');
    }
}
